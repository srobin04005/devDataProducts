plot(modelFit$finalModel)
text(modelFit$finalModel)
source('~/.active-rstudio-document', echo=TRUE)
modelFit$finalModel
fancyRpartPlot(modelFit$finalModel)
library(rattle)
fancyRpartPlot(modelFit$finalModel)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
modelFit$finalModel$node2
modelFit$finalModel[1]
modelFit$finalModel[[1]
]
modelFit$finalModel$node[[3]]
summary(modelFit)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("pgmm")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
olive
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?tree
??tree
source('~/.active-rstudio-document', echo=TRUE)
?ctree
??ctree
source('~/.active-rstudio-document', echo=TRUE)
newdata
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
newdata
olive
summary(olive)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ElemStatLearn")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(trainSA)
source('~/.active-rstudio-document', echo=TRUE)
predictionTrain
predictionTrain$finalModel
predictionTrain$rotation
confusionMatrix(predictionTrain, testSA$chd)
source('~/.active-rstudio-document', echo=TRUE)
confusionMatrix(predictionTrain, testSA$chd)
predictionTrain
predictionTest
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
modelvowel
vowel.train
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(vowel.train)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
predict(train,vowel.test)
source('~/.active-rstudio-document', echo=TRUE)
pred2 <- predict(train_gbm,vowel.test)
plot(pred1,pred2)
combine <- predict(train,train_gbm)
pred3 <- data.frame(pred1,pred2,vowel.test[,1])
pred3 <- data.frame(pred1,pred2,vowel.test[,1])
pred3
source('~/.active-rstudio-document', echo=TRUE)
pred2 <- predict(train_gbm,vowel.test)
pred3 <- data.frame(pred1,pred2,vowel.test[,1])
comb <- train(y~.,method="gam", data=pred3)
source('~/.active-rstudio-document', echo=TRUE)
combine
source('~/.active-rstudio-document', echo=TRUE)
combine
qplot(pred1,pred2)
warnings()
confusionMatrix(pred1,vowel.test$y)
con1 <- confusionMatrix(pred1,vowel.test$y)
con2 <- confusionMatrix(pred2,vowel.test$y)
con1
con1.accuracy
con1.Accuracy
con2
source('~/.active-rstudio-document', echo=TRUE)
mod_lda <- train(diagnosis~., data=training, method="lda")
pred_rf <- predict(mod_rf,testing$diagnosis)
library(lda)
?lda
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pred_lda$finalModel
mod_lda$finalModel
pred_rf <- predict(mod_rf,testing$diagnosis)
mod_rf$finalModel
pred_rf
testing
names(testing)
View(training)
View(testing)
pred_rf <- predict(mod_rf,testing$diagnosis, na.action = na.omit)
pred_gbm <- predict(mod_gbm,testing$diagnosis, na.action = na.omit)
pred_lda <- predict(mod_lda,testing$diagnosis, na.action = na.omit)
pred_rf <- predict(mod_rf,testing)
pred_gbm <- predict(mod_gbm,testing)
pred_lda <- predict(mod_lda,testing)
pred_rf
confusionMatrix(pred_rf,testing$diagnosis)
rf <- confusionMatrix(pred_rf,testing$diagnosis)
gbm <- confusionMatrix(pred_gbm,testing$diagnosis)
lda <- confusionMatrix(pred_lda,testing$diagnosis)
gbm
lda
lda
gbm
mod <- lasso(compressiveStrength~., data=training)
library(caret)
mod <- lasso(compressiveStrength~., data=training)
mod <- train(compressiveStrength~., data=training, method="lasso")
mod <- train(CompressiveStrength~., data=training, method="lasso")
training
names(training)
source('~/.active-rstudio-document', echo=TRUE)
mod$finalModel
?plot.enet
plot(mod)
plot(mod, xvar="penalty")
plot(mod, xvar="penalty")
plot(mod, xvar=xvar = c("fraction", "penalty", "L1norm", "step"))
plot(mod, xvar = c("fraction", "penalty", "L1norm", "step"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?bat
??bat
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("forecast")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
training
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data
dat
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mod$finalModel
?e1071
source('~/.active-rstudio-document', echo=TRUE)
mod
predict(mod,testing)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
)
plot(pred )
predict(mod,testing)
)
RMSE(pred)
?RMSE
RMSE(pred, training)
RMSE(pred, testing)
RMSE(training, testing)
RMSE(pred, testing)
RMSE(pred, testing$CompressiveStrength)
source('~/.active-rstudio-document', echo=TRUE)
plot(mod)
plot(mod, xvar="penalty")
mod$finalModel
mod$Cement
con1$finalModel
con1
source('~/.active-rstudio-document', echo=TRUE)
pred3
RMSE(pred1,pred2     )
plot(pred3 )
match <- pred3[pred1 == pred2,]
match
summary(match)
nrow(pred3)
nrow(match)/nrow(pred3)
source('~/.active-rstudio-document', echo=TRUE)
library(rattle)
rattle()
dspath <- "http://rattle.togaware.com/weather.csv"
dspath <- system.file("csv", "weather.csv", package="rattle")
dspath
dim(dspath)
dspath
read.csv(dspath)
weather <-read.csv(dspath)
dim(weather)
names(weather)
class(weather)
tbl_df(weather)
library(rattle)
tbl_df(weather)
rattle()
weather[sample(nrow(weather),6),]
weather[sample(nrow(weather),6),]
weather[sample(nrow(weather),6),]
normVarNames(names(weather))
normVarNames(names(weather))
source('~/.active-rstudio-document', echo=TRUE)
install.packages('tidyr')
source('~/.active-rstudio-document', echo=TRUE)
df
install.packages('FSelector')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dspath
source('~/.active-rstudio-document', echo=TRUE)
df
source('~/.active-rstudio-document', echo=TRUE)
tbl_df(df)
ds <- tbl_df(df)
str(ds)
ds
dim(ds)
names(ds) <- normVarNames(names(ds))
names(ds)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(ds)
names(ds) <- normVarNames(names(ds))
names(ds)
sapply(ds,class)  # check the class of each variable
(var <- names(ds))
source('~/.active-rstudio-document', echo=TRUE)
id
vars
risk
ignore <- union(id,ifexists("risk") risk)
ignore <- union(id,if(exists("risk")) risk)
(ids <- which(sapply(ds, function(x) length(unique(x))) == nrow(ds))) # unique values
ignore <- union(ignore, names(ids))
mvc <- sapply(ds[vars], function(x) sum(is.na(x)))
mvn <- names(which(mvc == nrow(ds)))
ignore <- union(ignore, mvn)
mvn <- names(which(mvc >= 0.7*nrow(ds)))
ignore <- union(ignore, mvn)
mvn <- names(which(mvc >= 0.7*nrow(ds)))
ignore <- union(ignore, mvn)
# Too Many Levels
factors <- which(sapply(ds[vars], is.factor))
lvls <- sapply(factors, function(x) length(levels(ds[[x]])))
(many <- names(which(lvls > 20)))
## character(0)
ignore <- union(ignore, many)
# Constants Ignore variables with constant values.
(constants <- names(which(sapply(ds[vars], function(x) all(x == x[1L])))))
## [1] "location"
ignore <- union(ignore, constants)
vars
### Clean|Identify Correlated Variables
mc <- cor(ds[which(sapply(ds, is.numeric))], use="complete.obs")
mc[upper.tri(mc, diag=TRUE)] <- NA
mc <-
mc %>%
abs() %>%
data.frame() %>%
mutate(var1=row.names(mc)) %>%
gather(var2, cor, -var1) %>%
na.omit()
mc <- mc[order(-abs(mc$cor)),]
mc
ignore <- union(ignore, c("temp_3pm", "pressure_9am", "temp_9am"))
##
###### Remove the vars
vars <- setdiff(vars, ignore)
##
###### Identify subsets of variable good for modeling
form <- formula(paste(target, "~ ."))
cfs(form, ds[vars])
information.gain(form, ds[vars])  #importance
dim(ds)
## [1] 366 24
sum(is.na(ds[target]))
## [1] 0
ds <- ds[!is.na(ds[target]),]
sum(is.na(ds[target]))
## [1] 0
dim(ds)
## [1] 366 24
ods <- ds  # holds data that will be restored.
dim(ds[vars])
sum(is.na(ds[vars]))
ds[vars] <- na.roughfix(ds[vars])
sum(is.na(ds[vars]))
dim(ds[vars])
ds <- ods  # rest
source('~/.active-rstudio-document', echo=TRUE)
## Clean
inputc <- setdiff(vars, target)
inputc
inputi <- sapply(inputc, function(x) which(x == names(ds)), USE.NAMES=FALSE)
inputi
# For convenience we record the number of observations:
nobs <- nrow(ds)
nobs
numi <- intersect(inputi, which(sapply(ds, is.numeric)))
numi
numc <- names(ds)[numi]
numc
cati <- intersect(inputi, which(sapply(ds, is.factor)))
cati
catc <- names(ds)[cati]
catc
dsdate <- paste0("_", format(Sys.Date(), "%y%m%d"))
dsrdata <- paste0(dsname, dsdate, ".RData")
save(ds, dsname, dspath, dsdate, target, risk, id, ignore, vars,
nobs, omit, inputi, inputc, numi, numc, cati, catc, file=dsrdata)
# We would only do the above steps once, and then each time we wish to use the dataset, we would
# load() it into R.
(load(dsrdata))
source('~/.active-rstudio-document', echo=TRUE)
View(ods)
get(dsname)
source('C:/Users/srobin/Downloads/R/tutorial/onePageR/1DataO.R', echo=TRUE)
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
View(dataset)
shiny::runApp('GitHub/devDataProducts')
View(dataset)
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
lm_formula$coef
glm_formula$coef
library(randomForest)
randomForest(mpg~as.numeric(cyl)+hp+wt+drat+carb+disp+gear, data=dataset)
dataset
randomForest(mpg~as.numeric(cyl)+hp+wt+drat+carb+disp+gear, data=dataset)
?randomForest
randomForest(mpg~hp+wt+drat+carb+disp+gear, data=dataset)
randomForest(mpg~cyl+hp+wt+drat+carb+disp+gear, data=dataset)
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
rf_formula$coef
rf_formula
fit <- rf_formula
newData <- data.frame(cyl=input$cyl,
hp=input$hp,
wt=input$wt,
drat=input$drat,
carb=input$carb,
disp=input$disp,
gear=input$gear
)
predict(fit,newData)
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
newData <- data.frame(cyl=8,
hp=300,
wt=3.8,
drat=3.8,
carb=5,
disp=400,
gear=4
)
predict(fit,newData)
predict(lm_formula,newData)
predict(glm_formula,newData)
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?randomForest
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
getwd()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
library(shiny)
shinyapps::setAccountInfo(name='rsrobinett', token='39E8B8918CE361572585861650B408D2',
secret='wjOEUm8sGxT8lIAV0xI7P4LRo/PsZizUbvnO0r5T')
shinyapps::deployApp()
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
?reactive
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
deployApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
?rf
?randomForest
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shinyapps::deployApp()
shinyapps::deployApp()
library(shiny)
shinyapps::setAccountInfo(name='rsrobinett', token='39E8B8918CE361572585861650B408D2',
secret='wjOEUm8sGxT8lIAV0xI7P4LRo/PsZizUbvnO0r5T')
shinyapps::deployApp()
library(shiny)
shinyapps::setAccountInfo(name='rsrobinett', token='39E8B8918CE361572585861650B408D2',
secret='wjOEUm8sGxT8lIAV0xI7P4LRo/PsZizUbvnO0r5T')
shinyapps::deployApp()
library(shiny)
shinyapps::setAccountInfo(name='rsrobinett', token='39E8B8918CE361572585861650B408D2',
secret='wjOEUm8sGxT8lIAV0xI7P4LRo/PsZizUbvnO0r5T')
shinyapps::deployApp()
shiny::runApp()
