(ids <- which(sapply(ds, function(x) length(unique(x))) == nrow(ds))) # unique values
ignore <- union(ignore, names(ids))
mvc <- sapply(ds[vars], function(x) sum(is.na(x)))
mvn <- names(which(mvc == nrow(ds)))
ignore <- union(ignore, mvn)
mvn <- names(which(mvc >= 0.7*nrow(ds)))
ignore <- union(ignore, mvn)
mvn <- names(which(mvc >= 0.7*nrow(ds)))
ignore <- union(ignore, mvn)
# Too Many Levels
factors <- which(sapply(ds[vars], is.factor))
lvls <- sapply(factors, function(x) length(levels(ds[[x]])))
(many <- names(which(lvls > 20)))
## character(0)
ignore <- union(ignore, many)
# Constants Ignore variables with constant values.
(constants <- names(which(sapply(ds[vars], function(x) all(x == x[1L])))))
## [1] "location"
ignore <- union(ignore, constants)
vars
### Clean|Identify Correlated Variables
mc <- cor(ds[which(sapply(ds, is.numeric))], use="complete.obs")
mc[upper.tri(mc, diag=TRUE)] <- NA
mc <-
mc %>%
abs() %>%
data.frame() %>%
mutate(var1=row.names(mc)) %>%
gather(var2, cor, -var1) %>%
na.omit()
mc <- mc[order(-abs(mc$cor)),]
mc
ignore <- union(ignore, c("temp_3pm", "pressure_9am", "temp_9am"))
##
###### Remove the vars
vars <- setdiff(vars, ignore)
##
###### Identify subsets of variable good for modeling
form <- formula(paste(target, "~ ."))
cfs(form, ds[vars])
information.gain(form, ds[vars])  #importance
dim(ds)
## [1] 366 24
sum(is.na(ds[target]))
## [1] 0
ds <- ds[!is.na(ds[target]),]
sum(is.na(ds[target]))
## [1] 0
dim(ds)
## [1] 366 24
ods <- ds  # holds data that will be restored.
dim(ds[vars])
sum(is.na(ds[vars]))
ds[vars] <- na.roughfix(ds[vars])
sum(is.na(ds[vars]))
dim(ds[vars])
ds <- ods  # rest
source('~/.active-rstudio-document', echo=TRUE)
## Clean
inputc <- setdiff(vars, target)
inputc
inputi <- sapply(inputc, function(x) which(x == names(ds)), USE.NAMES=FALSE)
inputi
# For convenience we record the number of observations:
nobs <- nrow(ds)
nobs
numi <- intersect(inputi, which(sapply(ds, is.numeric)))
numi
numc <- names(ds)[numi]
numc
cati <- intersect(inputi, which(sapply(ds, is.factor)))
cati
catc <- names(ds)[cati]
catc
dsdate <- paste0("_", format(Sys.Date(), "%y%m%d"))
dsrdata <- paste0(dsname, dsdate, ".RData")
save(ds, dsname, dspath, dsdate, target, risk, id, ignore, vars,
nobs, omit, inputi, inputc, numi, numc, cati, catc, file=dsrdata)
# We would only do the above steps once, and then each time we wish to use the dataset, we would
# load() it into R.
(load(dsrdata))
source('~/.active-rstudio-document', echo=TRUE)
View(ods)
get(dsname)
source('C:/Users/srobin/Downloads/R/tutorial/onePageR/1DataO.R', echo=TRUE)
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
View(dataset)
shiny::runApp('GitHub/devDataProducts')
View(dataset)
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
shiny::runApp('GitHub/devDataProducts')
?mtcars
datasets
library(datasets)
datasets
list(datasets)
datasets
datasets()
?datasets
library(help= "datasets")
data(rock)
rock
data(USArrests)
USArrests
install.packages(wordcount)
install.packages(wordCount)
install.packages(wordcloud)
install.packages(tm)
install.packages("tm")
library(wordcloud)
??wordcloud
install.packages("wordcloud")
library(wordcloud)
set.seed(142)
wordcloud(names(freq))
wordcloud(names(freq))
names(freq)
data(freq)
dtm
data(dtm)
Module <- "TextMiningO"
cat(paste0("\\newcommand{\\Module}{", Module, "}"))
set.seed(42)
## ----setup, child="mycourse.Rnw"-----------------------------------------
## ----setup_options, include=FALSE----------------------------------------
library(knitr)
library(xtable)
opts_chunk$set(cache=FALSE)
opts_chunk$set(out.width='0.8\\textwidth')
opts_chunk$set(fig.align='center')
opts_chunk$set(src.top=NULL)
opts_chunk$set(src.bot=NULL)
opts_chunk$set(out.lines=4)
opts_chunk$set(out.truncate=80)
opts_chunk$set(fig.path=sprintf("figures/%s/", Module))
opts_chunk$set(cache.path=sprintf("cache/%s/", Module))
opts_chunk$set(bib.file=paste0(Module, ".bib"))
opts_chunk$set(background='#E7E7E7')
# Leave code as I have formatted it.
opts_chunk$set(tidy=FALSE)
# Hooks
# Allow auto crop of base graphics plots when crop=TRUE.
knit_hooks$set(crop=hook_pdfcrop)
# Truncate long lines and long output
hook_output <- knit_hooks$get("output")
hook_source <- knit_hooks$get("source")
knit_hooks$set(output=function(x, options)
{
if (options$results != "asis")
{
# Split string into separate lines.
x <- unlist(stringr::str_split(x, "\n"))
# Trim to the number of lines specified.
if (!is.null(n <- options$out.lines))
{
if (length(x) > n)
{
# Truncate the output.
x <- c(head(x, n), "....\n")
}
}
# Truncate each line to length specified.
if (!is.null(m <- options$out.truncate))
{
len <- nchar(x)
x[len>m] <- paste0(substr(x[len>m], 0, m-3), "...")
}
# Paste lines back together.
x <- paste(x, collapse="\n")
# Replace ' = ' with '=' - my preference. Hopefully won't
# affect things inappropriately.
x <- gsub(" = ", "=", x)
}
hook_output(x, options)
},
source=function(x, options)
{
# Split string into separate lines.
x <- unlist(stringr::str_split(x, "\n"))
# Trim to the number of lines specified.
if (!is.null(n <- options$src.top))
{
if (length(x) > n)
{
# Truncate the output.
if (is.null(m <-options$src.bot)) m <- 0
x <- c(head(x, n+1), "\n....\n", tail(x, m+2))
}
}
# Paste lines back together.
x <- paste(x, collapse="\n")
hook_source(x, options)
})
# Optionally allow R Code chunks to be environments so we can refer to them.
knit_hooks$set(rcode=function(before, options, envir)
{
if (before)
sprintf('\\begin{rcode}\\label{%s}\\hfill{}', options$label)
else
'\\end{rcode}'
})
## ----load_packages, message=FALSE----------------------------------------
library(tm)              # Framework for text mining.
library(SnowballC)       # Provides wordStem() for stemming.
library(qdap)            # Quantitative discourse analysis of transcripts.
library(qdapDictionaries)
library(dplyr)           # Data preparation and pipes %>%.
library(RColorBrewer)    # Generate palette of colours for plots.
library(ggplot2)         # Plot word frequencies.
library(scales)          # Include commas in numbers.
library(Rgraphviz)       # Correlation plots.
install.packages("Rgraphviz")
library(Rgraphviz)       # Correlation plots.
library(Rgraphviz)       # Correlation plots.
install.packages("Rgraphviz", source=T)
?install.packages
install.packages("Rgraphviz", type="source")
install.packages("Rgraphviz", repos=Null, type="source")
install.packages("Rgraphviz", type="source")
library(magrittr)         #
library(stringr)
## ----child-demo, child="documentation.Rnw", eval=TRUE--------------------
## ----help_library, eval=FALSE, tidy=FALSE--------------------------------
## ?read.csv
## ----help_package, eval=FALSE--------------------------------------------
## library(help=rattle)
## ----child-bib, child='generatebib.Rnw', eval=TRUE-----------------------
## ----record_start_time, echo=FALSE---------------------------------------
start.time <- proc.time()
## ----generate_bib, echo=FALSE, message=FALSE, warning=FALSE--------------
# Write all packages in the current session to a bib file
if (is.null(opts_chunk$get("bib.file"))) opts_chunk$set(bib.file="Course.bib")
write_bib(sub("^.*/", "", grep("^/", searchpaths(), value=TRUE)),
file=opts_chunk$get("bib.file"))
system(paste("cat extra.bib >>", opts_chunk$get("bib.file")))
# Fix up specific issues.
# R-earth
system(paste("perl -pi -e 's|. Derived from .*$|},|'",
opts_chunk$get("bib.file")))
# R-randomForest
system(paste("perl -pi -e 's|Fortran original by Leo Breiman",
"and Adele Cutler and R port by|Leo Breiman and",
"Adele Cutler and|'", opts_chunk$get("bib.file")))
# R-C50
system(paste("perl -pi -e 's|. C code for C5.0 by R. Quinlan|",
" and J. Ross Quinlan|'", opts_chunk$get("bib.file")))
# R-caret
system(paste("perl -pi -e 's|. Contributions from|",
" and|'", opts_chunk$get("bib.file")))
# Me
system(paste("perl -pi -e 's|Graham Williams|",
"Graham J Williams|'", opts_chunk$get("bib.file")))
## ----cli_convert_pdf, eval=FALSE-----------------------------------------
## system("for f in *.pdf; do pdftotext -enc ASCII7 -nopgbrk $f; done")
## ----cli_convert_doc, eval=FALSE-----------------------------------------
## system("for f in *.doc; do antiword $f; done")
## ----list_sources--------------------------------------------------------
getSources()
## ----list_readers, out.lines=NULL----------------------------------------
getReaders()
## ----location_of_txt_docs------------------------------------------------
cname <- file.path(".", "corpus", "txt")
cname
## ----folder_of_txt_docs--------------------------------------------------
length(dir(cname))
dir(cname)
## ----load_corpus---------------------------------------------------------
library(tm)
docs <- Corpus(DirSource(cname))
docs
class(docs)
class(docs[[1]])
summary(docs)
## ----read_pdf, eval=FALSE------------------------------------------------
## docs <- Corpus(DirSource(cname), readerControl=list(reader=readPDF))
## ----read_doc, eval=FALSE------------------------------------------------
## docs <- Corpus(DirSource(cname), readerControl=list(reader=readDOC))
## ----read_doc_options, eval=FALSE----------------------------------------
## docs <- Corpus(DirSource(cname), readerControl=list(reader=readDOC("-r -s")))
## ----out.lines=26--------------------------------------------------------
inspect(docs[16])
## ------------------------------------------------------------------------
getTransformations()
## ----transform_slash-----------------------------------------------------
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "@")
docs
library(tm)
library(tm)
docs <- Corpus(DirSource(cname))
docs
class(docs)
class(docs[[1]])
docs <- Corpus(DirSource(cname), readerControl=list(reader=readDOC("-r -s")))
shiny::runApp('GitHub/devDataProducts')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
shinyapps::deployApp()
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat, data=dataset)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
prd
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=100,mtry=3)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=150,mtry=2)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=2)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=3000,mtry=2)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1500,mtry=2)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=800,mtry=2)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1200,mtry=2)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=2)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=4)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=40)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=5)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=3)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)
lm1
importance(lm1)[1]
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=3)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
prd
importance(lm1)[2]
lm1
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=3)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
paste("Predicted MPG from sample input: ", round(prd,2))
importance(lm1)
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=3)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
paste("Predicted MPG from sample input: ", round(prd,2))
importance(lm1)
importance(lm1)
lm1
lm1
lm1$Var
lm1$rsq
mean(lm1$rsq)
mean(lm1$mse)
lm1$coef
lm1$coef[1]
lm1
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset)
plot(importance(lm1))
abline(0,0)
?importance
lm1
plot(importance(lm1))
abline(0,0)
plot(lm1)
plot(lm1)
plot(lm1)
plot(lm1)
plot(lm2)
library(randomForest)
dataset <- mtcars
lm1 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=1000,mtry=3)
lm2 <- randomForest(mpg~cyl+hp+wt+drat+disp+gear+carb, data=dataset, ntree=50,mtry=3)
pred <- data.frame(cyl=4,hp=100,wt=2.8,drat=3.4,disp=200,gear=3.4,carb=2)
prd <- predict(lm1, pred, interval="confidence")
lm1$obb.times
lm1$oob.times
lm1$err.rate
lm1$error.rate
